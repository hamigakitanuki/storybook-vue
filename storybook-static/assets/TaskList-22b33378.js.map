{"version":3,"file":"TaskList-22b33378.js","sources":["../../src/store.js","../../src/components/TaskList.vue"],"sourcesContent":["/* A simple Pinia store/actions implementation.\n * A true app would be more complex and separated into different files.\n */\nimport { defineStore } from 'pinia';\n\n/*\n * The initial state of our store when the app loads.\n * Usually, you would fetch this from a server. Let's not worry about that now\n */\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\n/*\n * The store is created here.\n * You can read more about Pinia defineStore in the docs:\n * https://pinia.vuejs.org/core-concepts/\n */\nexport const useTaskStore = defineStore({\n  id: 'taskbox',\n  state: () => ({\n    tasks: defaultTasks,\n    status: 'idle',\n    error: null,\n  }),\n  actions: {\n    archiveTask(id) {\n      const task = this.tasks.find((task) => task.id === id);\n      if (task) {\n        task.state = 'TASK_ARCHIVED';\n      }\n    },\n    pinTask(id) {\n      const task = this.tasks.find((task) => task.id === id);\n      if (task) {\n        task.state = 'TASK_PINNED';\n      }\n    },\n  },\n  getters: {\n    getFilteredTasks: (state) => {\n      const filteredTasks = state.tasks.filter(\n        (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\n      );\n      return filteredTasks;\n    },\n  },\n});","<template>\n  <PureTaskList :tasks=\"tasks\" @archive-task=\"archiveTask\" @pin-task=\"pinTask\" />\n</template>\n\n<script>\nimport PureTaskList from './PureTaskList.vue';\n\nimport { computed } from 'vue';\n\nimport { useTaskStore } from '../store';\n\nexport default {\n  components: { PureTaskList },\n  name: 'TaskList',\n  setup() {\n    //ðŸ‘‡ Creates a store instance\n    const store = useTaskStore();\n\n    //ðŸ‘‡ Retrieves the tasks from the store's state auxiliary getter function\n    const tasks = computed(() => store.getFilteredTasks);\n\n    //ðŸ‘‡ Dispatches the actions back to the store\n    const archiveTask = (task) => store.archiveTask(task);\n    const pinTask = (task) => store.pinTask(task);\n\n    return {\n      tasks,\n      archiveTask,\n      pinTask,\n    };\n  },\n};\n</script>"],"names":["defaultTasks","useTaskStore","defineStore","id","task","state","t","_sfc_main","PureTaskList","store","computed","_createBlock","_component_PureTaskList","$setup"],"mappings":"qMASA,MAAMA,EAAe,CACnB,CAAE,GAAI,IAAK,MAAO,YAAa,MAAO,YAAc,EACpD,CAAE,GAAI,IAAK,MAAO,iBAAkB,MAAO,YAAc,EACzD,CAAE,GAAI,IAAK,MAAO,iBAAkB,MAAO,YAAc,EACzD,CAAE,GAAI,IAAK,MAAO,kBAAmB,MAAO,YAAc,CAC5D,EAOaC,EAAeC,EAAY,CACtC,GAAI,UACJ,MAAO,KAAO,CACZ,MAAOF,EACP,OAAQ,OACR,MAAO,IACX,GACE,QAAS,CACP,YAAYG,EAAI,CACd,MAAMC,EAAO,KAAK,MAAM,KAAMA,GAASA,EAAK,KAAOD,CAAE,EACjDC,IACFA,EAAK,MAAQ,gBAEhB,EACD,QAAQD,EAAI,CACV,MAAMC,EAAO,KAAK,MAAM,KAAMA,GAASA,EAAK,KAAOD,CAAE,EACjDC,IACFA,EAAK,MAAQ,cAEhB,CACF,EACD,QAAS,CACP,iBAAmBC,GACKA,EAAM,MAAM,OAC/BC,GAAMA,EAAE,QAAU,cAAgBA,EAAE,QAAU,aACvD,CAGG,CACH,CAAC,ECvCIC,EAAU,CACb,WAAY,CAAE,aAAAC,CAAc,EAC5B,KAAM,WACN,OAAQ,CAEN,MAAMC,EAAQR,IASd,MAAO,CACL,MAPYS,EAAS,IAAMD,EAAM,gBAAgB,EAQjD,YALmBL,GAASK,EAAM,YAAYL,CAAI,EAMlD,QALeA,GAASK,EAAM,QAAQL,CAAI,EAO7C,CACH,+DA9BEO,EAA+EC,EAAA,CAAhE,MAAOC,EAAK,MAAG,cAAcA,EAAW,YAAG,UAAUA,EAAO"}